{"version":3,"sources":["components/new_cases_per_million_chart.component.js","components/total_cases_per_million_chart.component.js","components/new_deaths_per_million_chart.component.js","components/home.component.js","App.js","reportWebVitals.js","index.js"],"names":["NCPMChart","state","loading","labels","className","data","this","props","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","lka_new_cases_smoothed_per_million","pointRadius","ind_new_cases_smoothed_per_million","hidden","pak_new_cases_smoothed_per_million","bgd_new_cases_smoothed_per_million","afg_new_cases_smoothed_per_million","npl_new_cases_smoothed_per_million","btn_new_cases_smoothed_per_million","mdv_new_cases_smoothed_per_million","options","responsive","maintainAspectRatio","title","display","text","fontSize","legend","position","layout","padding","bottom","Component","TCPMChart","lka_total_cases_per_million","ind_total_cases_per_million","pak_total_cases_per_million","bgd_total_cases_per_million","afg_total_cases_per_million","npl_total_cases_per_million","btn_total_cases_per_million","mdv_total_cases_per_million","NDPMChart","lka_new_deaths_smoothed_per_million","ind_new_deaths_smoothed_per_million","pak_new_deaths_smoothed_per_million","afg_new_deaths_smoothed_per_million","npl_new_deaths_smoothed_per_million","Home","dataerror","nav","getData","bind","handleNavigation","setState","axios","get","then","response","console","log","sa_data","sa_data_filtered","push","LKA","AFG","BGD","BTN","IND","MDV","NPL","PAK","forEach","country","filtered_country","i","length","Date","parse","date","new_cases_smoothed_per_million","new_cases","lka_new_cases","afg_new_cases","bgd_new_cases","btn_new_cases","ind_new_cases","mdv_new_cases","npl_new_cases","pak_new_cases","element","new_deaths_smoothed_per_million","total_cases_per_million","str","class","role","type","onClick","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2be50a1a.chunk.js","sourcesContent":["import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class NCPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"\"> New cases (per million)\r\n                <br/>\r\n                <div className=\"\">\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_new_cases_smoothed_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bangladesh',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(53,132,110)',\r\n                            borderColor: 'rgb(53,132,110)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.bgd_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bhutan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(225,50,36)',\r\n                            borderColor: 'rgb(225,50,36)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.btn_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }, \r\n                          {\r\n                            label: 'Maldives',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(35,137,16)',\r\n                            borderColor: 'rgb(35,137,16)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.mdv_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: true,\r\n                        title:{\r\n                        display:true,\r\n                        text:'New cases (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                          \r\n                        }\r\n\r\n                    }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class TCPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"\"> Total cases (per million)\r\n                <br/>\r\n                <div className=\"\">\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_total_cases_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bangladesh',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(53,132,110)',\r\n                            borderColor: 'rgb(53,132,110)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.bgd_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bhutan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(225,50,36)',\r\n                            borderColor: 'rgb(225,50,36)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.btn_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }, \r\n                          {\r\n                            label: 'Maldives',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(35,137,16)',\r\n                            borderColor: 'rgb(35,137,16)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.mdv_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: true,\r\n                        title:{\r\n                        display:true,\r\n                        text:'Total cases (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                          \r\n                        }\r\n\r\n                    }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class NDPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"\"> New deaths (per million)\r\n                <br/>\r\n                <div className=\"\">\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_new_deaths_smoothed_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: true,\r\n                        title:{\r\n                        display:true,\r\n                        text:'New deaths (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                          \r\n                        }\r\n\r\n                    }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport NCPMChart from \"./new_cases_per_million_chart.component\";\r\nimport TCPMChart from \"./total_cases_per_million_chart.component\";\r\nimport NDPMChart from \"./new_deaths_per_million_chart.component\";\r\n\r\n\r\nexport default class Home extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        data: {},\r\n        loading:true,\r\n        dataerror:false,\r\n        nav:\"nc\"\r\n      };\r\n      this.getData=this.getData.bind(this);\r\n      this.handleNavigation=this.handleNavigation.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.getData();\r\n      }\r\n\r\n    getData(){\r\n        this.setState({ loading: true });\r\n        axios.get('https://covid.ourworldindata.org/data/owid-covid-data.json')\r\n        .then((response) => response.data)\r\n        .then((data) => {\r\n            console.log(data);\r\n          if(data){\r\n            //sa_data: South asian data\r\n              var sa_data = [];\r\n              var sa_data_filtered = [];\r\n              sa_data.push(\r\n                  data.LKA.data, \r\n                  data.AFG.data, \r\n                  data.BGD.data,\r\n                  data.BTN.data,\r\n                  data.IND.data,\r\n                  data.MDV.data,\r\n                  data.NPL.data,\r\n                  data.PAK.data\r\n                  );\r\n              //filtering data\r\n              sa_data.forEach(country=>{\r\n                let filtered_country=[];\r\n                console.log(country);\r\n                for(let i=0;i<country.length;i++){\r\n                    if((Date.parse(country[i].date)>=Date.parse('2020-03-08'))){\r\n                      if(country[i].new_cases_smoothed_per_million<0)\r\n                        country[i].new_cases_smoothed_per_million=0;\r\n                      if(country[i].new_cases<0)\r\n                        country[i].new_cases=0;\r\n                      filtered_country.push(country[i])\r\n                    }\r\n                }\r\n                sa_data_filtered.push(filtered_country);\r\n              })\r\n\r\n              console.log(sa_data_filtered);\r\n\r\n\r\n              var labels = []\r\n              var \r\n                lka_new_cases_smoothed_per_million=[],\r\n                lka_new_deaths_smoothed_per_million=[],\r\n                lka_total_cases_per_million=[],\r\n                lka_new_cases=[],\r\n                afg_new_cases_smoothed_per_million=[],\r\n                afg_new_deaths_smoothed_per_million=[],\r\n                afg_total_cases_per_million=[],\r\n                afg_new_cases=[],\r\n                bgd_new_cases_smoothed_per_million=[],\r\n                bgd_total_cases_per_million=[],\r\n                bgd_new_cases=[],\r\n                btn_new_cases_smoothed_per_million=[],\r\n                btn_total_cases_per_million=[],\r\n                btn_new_cases=[],\r\n                ind_new_cases_smoothed_per_million=[],\r\n                ind_new_deaths_smoothed_per_million=[],\r\n                ind_total_cases_per_million=[],\r\n                ind_new_cases=[],\r\n                mdv_new_cases_smoothed_per_million=[],\r\n                mdv_total_cases_per_million=[],\r\n                mdv_new_cases=[],\r\n                npl_new_cases_smoothed_per_million=[],\r\n                npl_new_deaths_smoothed_per_million=[],\r\n                npl_total_cases_per_million=[],\r\n                npl_new_cases=[],\r\n                pak_new_cases_smoothed_per_million=[],\r\n                pak_new_deaths_smoothed_per_million=[],\r\n                pak_total_cases_per_million=[],\r\n                pak_new_cases=[]\r\n                ;\r\n\r\n              //labels (taken from MDV dataset)\r\n              data.MDV.data.forEach(element => {\r\n                  labels.push(element.date);\r\n                });\r\n              //Sri Lanka\r\n                sa_data_filtered[0].forEach(element => {\r\n                  lka_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                  lka_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                  lka_total_cases_per_million.push(element.total_cases_per_million);\r\n                  lka_new_cases.push(element.new_cases);\r\n                });\r\n              //afganistan\r\n              sa_data_filtered[1].forEach(element => {\r\n                afg_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                afg_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                afg_total_cases_per_million.push(element.total_cases_per_million);\r\n                afg_new_cases.push(element.new_cases);\r\n              });\r\n              //bangladesh\r\n              sa_data_filtered[2].forEach(element => {\r\n                bgd_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                bgd_total_cases_per_million.push(element.total_cases_per_million);\r\n                bgd_new_cases.push(element.new_cases);\r\n              });\r\n              //bhutan\r\n              sa_data_filtered[3].forEach(element => {\r\n                btn_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                btn_total_cases_per_million.push(element.total_cases_per_million);\r\n                btn_new_cases.push(element.new_cases);\r\n              });\r\n              //ind\r\n              sa_data_filtered[4].forEach(element => {\r\n                ind_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                ind_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                ind_total_cases_per_million.push(element.total_cases_per_million);\r\n                ind_new_cases.push(element.new_cases);\r\n              });\r\n              //mdv\r\n              sa_data_filtered[5].forEach(element => {\r\n                mdv_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                mdv_total_cases_per_million.push(element.total_cases_per_million);\r\n                mdv_new_cases.push(element.new_cases);\r\n              });\r\n              //npl\r\n              sa_data_filtered[6].forEach(element => {\r\n                npl_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                npl_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                npl_total_cases_per_million.push(element.total_cases_per_million);\r\n                npl_new_cases.push(element.new_cases);\r\n              });\r\n              //pak\r\n              sa_data_filtered[7].forEach(element => {\r\n                pak_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                pak_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                pak_total_cases_per_million.push(element.total_cases_per_million);\r\n                pak_new_cases.push(element.new_cases);\r\n              });\r\n              this.setState({\r\n                  labels,\r\n                  lka_new_cases_smoothed_per_million,\r\n                  lka_new_deaths_smoothed_per_million,\r\n                  lka_total_cases_per_million,\r\n                  lka_new_cases,\r\n                  afg_new_cases_smoothed_per_million,\r\n                  afg_new_deaths_smoothed_per_million,\r\n                  afg_total_cases_per_million,\r\n                  afg_new_cases,\r\n                  bgd_new_cases_smoothed_per_million,\r\n                  bgd_total_cases_per_million,\r\n                  bgd_new_cases,\r\n                  btn_new_cases_smoothed_per_million,\r\n                  btn_total_cases_per_million,\r\n                  btn_new_cases,\r\n                  ind_new_cases_smoothed_per_million,\r\n                  ind_new_deaths_smoothed_per_million,\r\n                  ind_total_cases_per_million,\r\n                  ind_new_cases,\r\n                  mdv_new_cases_smoothed_per_million,\r\n                  mdv_total_cases_per_million,\r\n                  mdv_new_cases,\r\n                  npl_new_cases_smoothed_per_million,\r\n                  npl_new_deaths_smoothed_per_million,\r\n                  npl_total_cases_per_million,\r\n                  npl_new_cases,\r\n                  pak_new_cases_smoothed_per_million,\r\n                  pak_new_deaths_smoothed_per_million,\r\n                  pak_total_cases_per_million,\r\n                  pak_new_cases\r\n              }\r\n              )\r\n            this.setState({\r\n              loading: false,\r\n              data: data\r\n            });\r\n\r\n\r\n\r\n          }else{\r\n            this.setState({\r\n              loading: false,\r\n              dataerror: true\r\n            });\r\n          }\r\n        });\r\n    }\r\n  \r\n    handleNavigation(str){\r\n      this.setState({nav:str});\r\n    }\r\n    \r\n\r\n    render(){\r\n        if(this.state.loading){\r\n            return (<div>Loading</div>)\r\n        }\r\n        else if(this.state.dataerror){\r\n            return (<div>Data error</div>)\r\n        }else{\r\n            return (\r\n<div>\r\n  <h3>South Asian COVID-19 statistics</h3>\r\n  <div class=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"Basic example\">\r\n\r\n    <button type=\"button\" \r\n      onClick={() => this.handleNavigation(\"nc\")}\r\n      className={(this.state.nav==='nc')?\"btn btn-sm btn-primary\":\"btn btn-sm btn-secondary\"} >\r\n      New Cases\r\n    </button>\r\n\r\n    <button type=\"button\" \r\n    onClick={() => this.handleNavigation(\"tc\")}\r\n    className={(this.state.nav==='tc')?\"btn btn-sm btn-primary\":\"btn btn-sm btn-secondary\"} >\r\n      Total Cases\r\n    </button>\r\n\r\n    <button type=\"button\" \r\n    onClick={() => this.handleNavigation(\"nd\")}\r\n    className={(this.state.nav==='nd')?\"btn btn-sm btn-primary\":\"btn btn-sm btn-secondary\"} >\r\n      New Deaths\r\n      </button>\r\n\r\n  </div>\r\n  {(this.state.nav==='nc')?<NCPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n  {(this.state.nav==='tc')?<TCPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n  {(this.state.nav==='nd')?<NDPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n</div>\r\n                \r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import './App.css';\nimport Home from './components/home.component.js';\nimport React from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Route path=\"/\" component={Home}/>\n    </div>\n</Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}