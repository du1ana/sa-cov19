{"version":3,"sources":["components/new_cases_per_million_chart.component.js","components/total_cases_per_million_chart.component.js","components/new_deaths_per_million_chart.component.js","components/home.component.js","App.js","reportWebVitals.js","index.js"],"names":["NCPMChart","state","loading","labels","className","data","this","props","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","lka_new_cases_smoothed_per_million","pointRadius","ind_new_cases_smoothed_per_million","hidden","pak_new_cases_smoothed_per_million","bgd_new_cases_smoothed_per_million","afg_new_cases_smoothed_per_million","npl_new_cases_smoothed_per_million","btn_new_cases_smoothed_per_million","mdv_new_cases_smoothed_per_million","options","responsive","maintainAspectRatio","title","display","text","fontSize","legend","position","layout","padding","bottom","Component","TCPMChart","onHover","bind","e","target","style","cursor","lka_total_cases_per_million","ind_total_cases_per_million","pak_total_cases_per_million","bgd_total_cases_per_million","afg_total_cases_per_million","npl_total_cases_per_million","btn_total_cases_per_million","mdv_total_cases_per_million","NDPMChart","lka_new_deaths_smoothed_per_million","ind_new_deaths_smoothed_per_million","pak_new_deaths_smoothed_per_million","afg_new_deaths_smoothed_per_million","npl_new_deaths_smoothed_per_million","Home","dataerror","nav","getData","handleNavigation","setState","axios","get","then","response","sa_data","sa_data_filtered","push","LKA","AFG","BGD","BTN","IND","MDV","NPL","PAK","forEach","country","filtered_country","console","log","startidx","j","length","Date","parse","date","i","new_cases_smoothed_per_million","element","new_deaths_smoothed_per_million","total_cases_per_million","str","role","type","onClick","href","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54145fa4.chunk.js","sourcesContent":["import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class NCPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"chartContainer\"> <b>Daily new confirmed COVID-19 cases (per million people)</b>\r\n                <br/>\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_new_cases_smoothed_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bangladesh',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(53,132,110)',\r\n                            borderColor: 'rgb(53,132,110)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.bgd_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bhutan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(225,50,36)',\r\n                            borderColor: 'rgb(225,50,36)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.btn_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }, \r\n                          {\r\n                            label: 'Maldives',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(35,137,16)',\r\n                            borderColor: 'rgb(35,137,16)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.mdv_new_cases_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: false,\r\n                        title:{\r\n                        display:true,\r\n                        text:'New cases (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                        }\r\n\r\n                    }}\r\n                    />\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class TCPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n      this.onHover=this.onHover.bind(this);\r\n    }\r\n\r\n    onHover(e) {\r\n       e.target.style.cursor = 'pointer';\r\n    }\r\n\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"chartContainer\"> <b>Cumulative confirmed COVID-19 cases (per million people)</b>\r\n                <br/>\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_total_cases_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bangladesh',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(53,132,110)',\r\n                            borderColor: 'rgb(53,132,110)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.bgd_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Bhutan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(225,50,36)',\r\n                            borderColor: 'rgb(225,50,36)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.btn_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }, \r\n                          {\r\n                            label: 'Maldives',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(35,137,16)',\r\n                            borderColor: 'rgb(35,137,16)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.mdv_total_cases_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: false,\r\n                        title:{\r\n                        display:true,\r\n                        text:'Total cases (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                          \r\n                        }\r\n\r\n                    }}\r\n                    />\r\n                </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class NDPMChart extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading:true,\r\n        labels:null\r\n      };\r\n\r\n    }\r\n    componentDidMount() {\r\n      }\r\n\r\n\r\n    render(){\r\n            return (\r\n            <div className=\"chartContainer\"> <b>Daily new COVID-19 deaths (per million people)</b>\r\n                <br/>\r\n                    <Line\r\n                    data={{\r\n                        labels:this.props.data.labels,\r\n                        datasets: [\r\n                          {\r\n                            label: 'Sri Lanka',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(182,96,15)',\r\n                            borderColor: 'rgb(182,96,15)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.lka_new_deaths_smoothed_per_million,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'India',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(8,132,144)',\r\n                            borderColor: 'rgb(8,132,144)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.ind_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          \r\n                          {\r\n                            label: 'Pakistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(50,64,8)',\r\n                            borderColor: 'rgb(50,64,8)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.pak_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Afganistan',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(128,116,119)',\r\n                            borderColor: 'rgb(128,116,119)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.afg_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          },\r\n                          {\r\n                            label: 'Nepal',\r\n                            fill: false,\r\n                            lineTension: 0.5,\r\n                            backgroundColor: 'rgb(180,90,120)',\r\n                            borderColor: 'rgb(180,90,120)',\r\n                            borderWidth: 2,\r\n                            data: this.props.data.npl_new_deaths_smoothed_per_million,\r\n                            hidden: true,\r\n                            pointRadius:0.1\r\n                          }\r\n                          \r\n                        ]\r\n                      }}\r\n                    options={{\r\n                        responsive:true,\r\n                        maintainAspectRatio: false,\r\n                        title:{\r\n                        display:true,\r\n                        text:'New deaths (per million)',\r\n                        fontSize:20\r\n                        },\r\n                        legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                        },\r\n                        layout:{\r\n                          padding:{\r\n\r\n                            bottom:100\r\n                          }\r\n                          \r\n                        }\r\n\r\n                    }}\r\n                    />\r\n                </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport NCPMChart from \"./new_cases_per_million_chart.component\";\r\nimport TCPMChart from \"./total_cases_per_million_chart.component\";\r\nimport NDPMChart from \"./new_deaths_per_million_chart.component\";\r\n\r\n\r\nexport default class Home extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        data: {},\r\n        loading:true,\r\n        dataerror:false,\r\n        nav:\"nc\"\r\n      };\r\n      this.getData=this.getData.bind(this);\r\n      this.handleNavigation=this.handleNavigation.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.getData();\r\n      }\r\n\r\n    getData(){\r\n        this.setState({ loading: true });\r\n        axios.get('https://covid.ourworldindata.org/data/owid-covid-data.json')\r\n        .then((response) => response.data)\r\n        .then((data) => {\r\n          if(data){\r\n            //sa_data: South asian data\r\n              var sa_data = [];\r\n              var sa_data_filtered = [];\r\n              sa_data.push(\r\n                  data.LKA.data, \r\n                  data.AFG.data, \r\n                  data.BGD.data,\r\n                  data.BTN.data,\r\n                  data.IND.data,\r\n                  data.MDV.data,\r\n                  data.NPL.data,\r\n                  data.PAK.data\r\n                  );\r\n              //filtering data\r\n              sa_data.forEach(country=>{\r\n                let filtered_country=[];\r\n                console.log(country);\r\n                var startidx=0;\r\n                for(let j=0;j<country.length;j++){\r\n                  if((Date.parse(country[j].date)<Date.parse('2020-03-08'))){\r\n                    startidx++;\r\n                  }\r\n                }\r\n                for(let i=startidx;i<country.length;i++){\r\n                      if(country[i].new_cases_smoothed_per_million<0)\r\n                        country[i].new_cases_smoothed_per_million=0;\r\n                      filtered_country.push(country[i])\r\n                }\r\n                sa_data_filtered.push(filtered_country);\r\n              })\r\n\r\n              console.log(sa_data_filtered);\r\n\r\n\r\n              var labels = []\r\n              var \r\n                lka_new_cases_smoothed_per_million=[],\r\n                lka_new_deaths_smoothed_per_million=[],\r\n                lka_total_cases_per_million=[],\r\n                afg_new_cases_smoothed_per_million=[],\r\n                afg_new_deaths_smoothed_per_million=[],\r\n                afg_total_cases_per_million=[],\r\n                bgd_new_cases_smoothed_per_million=[],\r\n                bgd_total_cases_per_million=[],\r\n                btn_new_cases_smoothed_per_million=[],\r\n                btn_total_cases_per_million=[],\r\n                ind_new_cases_smoothed_per_million=[],\r\n                ind_new_deaths_smoothed_per_million=[],\r\n                ind_total_cases_per_million=[],\r\n                mdv_new_cases_smoothed_per_million=[],\r\n                mdv_total_cases_per_million=[],\r\n                npl_new_cases_smoothed_per_million=[],\r\n                npl_new_deaths_smoothed_per_million=[],\r\n                npl_total_cases_per_million=[],\r\n                pak_new_cases_smoothed_per_million=[],\r\n                pak_new_deaths_smoothed_per_million=[],\r\n                pak_total_cases_per_million=[]\r\n                ;\r\n\r\n              //labels (taken from MDV dataset)\r\n              data.MDV.data.forEach(element => {\r\n                  labels.push(element.date);\r\n                });\r\n              //Sri Lanka\r\n                sa_data_filtered[0].forEach(element => {\r\n                  lka_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                  lka_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                  lka_total_cases_per_million.push(element.total_cases_per_million);\r\n                });\r\n              //afganistan\r\n              sa_data_filtered[1].forEach(element => {\r\n                afg_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                afg_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                afg_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //bangladesh\r\n              sa_data_filtered[2].forEach(element => {\r\n                bgd_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                bgd_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //bhutan\r\n              sa_data_filtered[3].forEach(element => {\r\n                btn_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                btn_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //ind\r\n              sa_data_filtered[4].forEach(element => {\r\n                ind_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                ind_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                ind_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //mdv\r\n              sa_data_filtered[5].forEach(element => {\r\n                mdv_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                mdv_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //npl\r\n              sa_data_filtered[6].forEach(element => {\r\n                npl_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                npl_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                npl_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              //pak\r\n              sa_data_filtered[7].forEach(element => {\r\n                pak_new_cases_smoothed_per_million.push(element.new_cases_smoothed_per_million);\r\n                pak_new_deaths_smoothed_per_million.push(element.new_deaths_smoothed_per_million);\r\n                pak_total_cases_per_million.push(element.total_cases_per_million);\r\n              });\r\n              this.setState({\r\n                  labels,\r\n                  lka_new_cases_smoothed_per_million,\r\n                  lka_new_deaths_smoothed_per_million,\r\n                  lka_total_cases_per_million,\r\n                  afg_new_cases_smoothed_per_million,\r\n                  afg_new_deaths_smoothed_per_million,\r\n                  afg_total_cases_per_million,\r\n                  bgd_new_cases_smoothed_per_million,\r\n                  bgd_total_cases_per_million,\r\n                  btn_new_cases_smoothed_per_million,\r\n                  btn_total_cases_per_million,\r\n                  ind_new_cases_smoothed_per_million,\r\n                  ind_new_deaths_smoothed_per_million,\r\n                  ind_total_cases_per_million,\r\n                  mdv_new_cases_smoothed_per_million,\r\n                  mdv_total_cases_per_million,\r\n                  npl_new_cases_smoothed_per_million,\r\n                  npl_new_deaths_smoothed_per_million,\r\n                  npl_total_cases_per_million,\r\n                  pak_new_cases_smoothed_per_million,\r\n                  pak_new_deaths_smoothed_per_million,\r\n                  pak_total_cases_per_million\r\n              }\r\n              )\r\n            this.setState({\r\n              loading: false,\r\n              data: data\r\n            });\r\n\r\n\r\n\r\n          }else{\r\n            this.setState({\r\n              loading: false,\r\n              dataerror: true\r\n            });\r\n          }\r\n        });\r\n    }\r\n  \r\n    handleNavigation(str){\r\n      this.setState({nav:str});\r\n    }\r\n    \r\n\r\n    render(){\r\n        if(this.state.loading){\r\n            return (<div>Loading</div>)\r\n        }\r\n        else if(this.state.dataerror){\r\n            return (<div>Data error</div>)\r\n        }else{\r\n            return (\r\n  <div className=\"home container\">\r\n    <div className=\"header row\">\r\n      <div className=\"col-md-7 col-sm-12\">\r\n        <h3>South Asian COVID-19 statistics</h3>\r\n      </div> \r\n      <div className=\"btn-group btn-group-sm col-md-5 col-sm-12\" role=\"group\" aria-label=\"Basic example\">\r\n\r\n          <button type=\"button\" \r\n            onClick={() => this.handleNavigation(\"nc\")}\r\n            className={(this.state.nav==='nc')?\"btn btn-sm btn-primary active\":\"btn btn-sm btn-primary\"} >\r\n            New Cases\r\n          </button>\r\n\r\n          <button type=\"button\" \r\n            onClick={() => this.handleNavigation(\"tc\")}\r\n            className={(this.state.nav==='tc')?\"btn btn-sm btn-primary active\":\"btn btn-sm btn-primary\"} >\r\n              Cumulative Cases\r\n          </button>\r\n\r\n          <button type=\"button\" \r\n            onClick={() => this.handleNavigation(\"nd\")}\r\n            className={(this.state.nav==='nd')?\"btn btn-sm btn-primary active\":\"btn btn-sm btn-primary\"} >\r\n              New Deaths\r\n            </button>\r\n\r\n      </div>\r\n  </div>\r\n  \r\n  {(this.state.nav==='nc')?<NCPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n  {(this.state.nav==='tc')?<TCPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n  {(this.state.nav==='nd')?<NDPMChart className=\"chartcontainer\" data={this.state}/>:null}\r\n<footer>Developed by <a href=\"https://du1ana.github.io/\">Dulana Peiris</a>. Data by <a href=\"https://ourworldindata.org/coronavirus-source-data\">Our World in Data</a>. </footer>\r\n</div>\r\n                \r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import './App.css';\nimport Home from './components/home.component.js';\nimport React from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Route path=\"/\" component={Home}/>\n    </div>\n</Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}